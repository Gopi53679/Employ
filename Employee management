#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define the structure for an employee
struct Employee {
    int id;
    char name[50];
    float salary;
    struct Employee* next;
};

// Function to create a new employee node
struct Employee* createEmployee(int id, char name[], float salary) {
    struct Employee* newEmployee = (struct Employee*)malloc(sizeof(struct Employee));
    newEmployee->id = id;
    strcpy(newEmployee->name, name);
    newEmployee->salary = salary;
    newEmployee->next = NULL;
    return newEmployee;
}

// Function to insert an employee at the end of the list
void insertEmployee(struct Employee** head, int id, char name[], float salary) {
    struct Employee* newEmployee = createEmployee(id, name, salary);
    if (*head == NULL) {
        *head = newEmployee;
    } else {
        struct Employee* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newEmployee;
    }
    printf("Employee added successfully!\n");
}

// Function to display all employees
void displayEmployees(struct Employee* head) {
    if (head == NULL) {
        printf("No employees found!\n");
        return;
    }
    printf("Employee List:\n");
    printf("ID\tName\tSalary\n");
    while (head != NULL) {
        printf("%d\t%s\t%.2f\n", head->id, head->name, head->salary);
        head = head->next;
    }
}

// Function to search for an employee by ID
struct Employee* searchEmployee(struct Employee* head, int id) {
    while (head != NULL) {
        if (head->id == id) {
            return head;
        }
        head = head->next;
    }
    return NULL;
}

// Function to update an employee's details
void updateEmployee(struct Employee* head, int id) {
    struct Employee* emp = searchEmployee(head, id);
    if (emp == NULL) {
        printf("Employee with ID %d not found!\n", id);
        return;
    }
    printf("Enter new name: ");
    scanf("%s", emp->name);
    printf("Enter new salary: ");
    scanf("%f", &emp->salary);
    printf("Employee details updated successfully!\n");
}

// Function to delete an employee by ID
void deleteEmployee(struct Employee** head, int id) {
    struct Employee* temp = *head;
    struct Employee* prev = NULL;

    // If the employee to be deleted is the head
    if (temp != NULL && temp->id == id) {
        *head = temp->next;
        free(temp);
        printf("Employee deleted successfully!\n");
        return;
    }

    // Search for the employee to be deleted
    while (temp != NULL && temp->id != id) {
        prev = temp;
        temp = temp->next;
    }

    // If the employee was not found
    if (temp == NULL) {
        printf("Employee with ID %d not found!\n", id);
        return;
    }

    // Unlink the node from the linked list
    prev->next = temp->next;
    free(temp);
    printf("Employee deleted successfully!\n");
}

// Main function
int main() {
    struct Employee* head = NULL;
    int choice, id;
    char name[50];
    float salary;

    while (1) {
        printf("\nEmployee Management System\n");
        printf("1. Add Employee\n");
        printf("2. Display Employees\n");
        printf("3. Search Employee\n");
        printf("4. Update Employee\n");
        printf("5. Delete Employee\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter Employee ID: ");
                scanf("%d", &id);
                printf("Enter Employee Name: ");
                scanf("%s", name);
                printf("Enter Employee Salary: ");
                scanf("%f", &salary);
                insertEmployee(&head, id, name, salary);
                break;
            case 2:
                displayEmployees(head);
                break;
            case 3:
                printf("Enter Employee ID to search: ");
                scanf("%d", &id);
                struct Employee* emp = searchEmployee(head, id);
                if (emp != NULL) {
                    printf("Employee Found: ID = %d, Name = %s, Salary = %.2f\n", emp->id, emp->name, emp->salary);
                } else {
                    printf("Employee with ID %d not found!\n", id);
                }
                break;
            case 4:
                printf("Enter Employee ID to update: ");
                scanf("%d", &id);
                updateEmployee(head, id);
                break;
            case 5:
                printf("Enter Employee ID to delete: ");
                scanf("%d", &id);
                deleteEmployee(&head, id);
                break;
            case 6:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
